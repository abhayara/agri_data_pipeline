version: '3'
networks:
  default:
    name: ${PROJECT_NAME}-network
    external: true
services:
  data-producer:
    build:
      context: .
      dockerfile: producer.Dockerfile
    container_name: data-producer
    restart: on-failure
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS:-kafka:9092}
      - KAFKA_TOPIC=${KAFKA_TOPIC:-agri_data}
      - SCHEMA_REGISTRY_HOST_NAME=${SCHEMA_REGISTRY_HOST_NAME:-schema-registry}
      - SCHEMA_REGISTRY_PORT=${SCHEMA_REGISTRY_PORT:-8081}
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; socket.socket().connect((\"localhost\", 8000))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  data-consumer:
    build:
      context: .
      dockerfile: consumer.Dockerfile
    container_name: data-consumer
    restart: on-failure
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS:-kafka:9092}
      - KAFKA_TOPIC=${KAFKA_TOPIC:-agri_data}
      - KAFKA_GROUP_ID=${KAFKA_GROUP_ID:-agri_data_consumer}
      - KAFKA_AUTO_OFFSET_RESET=${KAFKA_AUTO_OFFSET_RESET:-earliest}
      - SCHEMA_REGISTRY_HOST_NAME=${SCHEMA_REGISTRY_HOST_NAME:-schema-registry}
      - SCHEMA_REGISTRY_PORT=${SCHEMA_REGISTRY_PORT:-8081}
      - GCS_BUCKET_NAME=${GCS_BUCKET_NAME:-agri_data_bucket}
      - GCS_TEMP_BLOB_PATH=${GCS_TEMP_BLOB_PATH:-raw/agri_data/}
    volumes:
      - ../gcp-creds.json:/app/gcp-creds.json
    depends_on:
      kafka:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; socket.socket().connect((\"localhost\", 8000))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
